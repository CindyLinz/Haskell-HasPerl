use strict;
use warnings;

use AE;
use JSON::XS;

my $cv = AE::cv;
my $t = AE::timer 2, 0, sub { $cv->send };

##{
import Control.Applicative

import qualified Data.IntSet as IS

import Foreign.StablePtr
import Foreign.Ptr

}

{
  package Map;

  use strict;
  use warnings;

  sub TIEARRAY {
    my $p = #{ liftIO $ stablePtrToInt <$> newStablePtr IS.empty
    };
    return bless [$p], $_[0];
  }

  sub FETCH {
    die "not implemented";
  }

  sub STORE {
    die "not implemented";
  }

  sub FETCHSIZE {
    my $p = $_[0][0];
    return #{ do
      p <- lift $ readFindSV "$p"
      liftIO $ IS.size <$> deRefStablePtr (intToStablePtr p)
    };
  }

  sub STORESIZE {
    die "not implemented";
  }

  sub UNTIE {
    #{
      liftIO $ putStrLn "UNTIE from haskell"
    };
    print "UNTIE\n";
  }

  sub DESTROY {
    #{
      liftIO $ putStrLn "DESTROY from haskell"
    };
    print "DESTROY\n";
  }

  sub POP {
    my $p = $_[0][0];
    my $o;
    ($_[0][0], $o) = #{ do
      p <- lift $ intToStablePtr <$> readFindSV "$p"
      (o, p') <- liftIO $ do
        set <- deRefStablePtr p
        freeStablePtr p

        let
          (o, set') = if IS.null set
            then (Nothing, set)
            else
              let (o, set') = IS.deleteFindMax set
              in (Just o, set')

        p' <- stablePtrToInt <$> newStablePtr set'
        return (o, p')
      case o of
        Just o' -> retSub (p', o')
        Nothing -> retSub (p', ())
    };
    return $o;
  }

  sub PUSH {
    my $this = shift;
    my $p = $this->[0];
    my @n = @_;
    $this->[0] = #{ do
      p <- lift $ intToStablePtr <$> readFindSV "$p"
      ns <- lift $ fromAV =<< findAV "@n"
      liftIO $ do
        set <- deRefStablePtr p
        freeStablePtr p
        let set' = foldl' (\set n -> IS.insert n set) set ns
        stablePtrToInt <$> (newStablePtr $! set')
    };
  }

  sub SHIFT {
    my $p = $_[0][0];
    my $o;
    ($_[0][0], $o) = #{ do
      p <- lift $ intToStablePtr <$> readFindSV "$p"
      (o, p') <- liftIO $ do
        set <- deRefStablePtr p
        freeStablePtr p

        let
          (o, set') = if IS.null set
            then (Nothing, set)
            else
              let (o, set') = IS.deleteFindMin set
              in (Just o, set')

        p' <- stablePtrToInt <$> newStablePtr set'
        return (o, p')
      case o of
        Just o' -> retSub (p', o')
        Nothing -> retSub (p', ())
    };
    return $o;
  }

  sub UNSHIFT {
    goto \&PUSH;
  }

  sub SPLICE {
    die "not implemented";
  }

  sub DELETE {
    die "not implemented";
  }

  sub EXISTS {
    die "not implemented";
  }
}

##{
import Control.Monad
import Control.Monad.IO.Class
import Control.Monad.Trans.Class
import Data.List
import Perl.Embed
import Perl.Call
import Perl.AV
import Perl.SV
import Perl.Ref
import Perl.Sub

intToStablePtr :: Int -> StablePtr a
intToStablePtr = castPtrToStablePtr . intPtrToPtr . fromIntegral

stablePtrToInt :: StablePtr a -> Int
stablePtrToInt = fromIntegral . ptrToIntPtr . castStablePtrToPtr

sayCindyIsBeautiful = putStrLn $ "CindyLinz is beautiful"
}

sub hello_haskell {
  my $name = shift;
  #{ do
    () <- lift $ eval "$name .= ' xx'";
    name <- lift $ readFindSV "$name"

    ser <- lift $ call "encode_json" =<< newRef =<< toAV ([4,5,6] :: [Int])
    liftIO $ putStrLn $ "Hello " ++ name ++ " !!! " ++ ser
    liftIO $ sayCindyIsBeautiful
  }
}

hello_haskell(#{ return $ take 3 "Haskell" }."Perl ".encode_json([1,2,3]));

tie my @arr, 'Map';
print "o\n";
print 0+@arr, $/;
push @arr, 1, 3, 2, 6, 4, 4, 3, 5, 7, 9;
#my $one = pop @arr;
print 0+@arr, $/;
print "n\n";

while( my $n = shift @arr ) {
  print "get $n\n";
}

#$cv->recv;
