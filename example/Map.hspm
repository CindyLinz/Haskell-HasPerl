package Map;

use strict;
use warnings;

print "Loading Map.hspm\n";

##{
import Control.Applicative

import qualified Data.IntSet as IS

import Foreign.StablePtr
import Foreign.Ptr

import Control.Monad
import Control.Monad.IO.Class
import Control.Monad.Trans.Class
import Data.List
import Perl.Embed
import Perl.Call
import Perl.AV
import Perl.SV
import Perl.Ref
import Perl.Sub
import Perl.Accessor

intToStablePtr :: Int -> StablePtr a
intToStablePtr = castPtrToStablePtr . intPtrToPtr . fromIntegral

stablePtrToInt :: StablePtr a -> Int
stablePtrToInt = fromIntegral . ptrToIntPtr . castStablePtrToPtr

sayCindyIsBeautiful = putStrLn $ "CindyLinz is beautiful"
}

sub TIEARRAY {
  my $p = #{ liftIO $ stablePtrToInt <$> newStablePtr IS.empty
  };
  return bless [$p], $_[0];
}

sub FETCH {
  die "not implemented";
}

sub STORE {
  die "not implemented";
}

sub FETCHSIZE {
  #{ do
    p <- readScalar =<< cap "@_" @- 0 @- 0
    liftIO $ IS.size <$> deRefStablePtr (intToStablePtr p)
  };
}

sub STORESIZE {
  die "not implemented";
}

sub UNTIE {
  #{
    liftIO $ putStrLn "UNTIE from haskell"
  };
  print "UNTIE\n";
}

sub DESTROY {
  #{
    liftIO $ putStrLn "DESTROY from haskell"
  };
  print "DESTROY\n";
}

sub POP {
  #{ do
    let capP = cap "@_" @- 0 @- 0
    p <- return . intToStablePtr =<< readScalar =<< capP
    (o, p') <- liftIO $ do
      set <- deRefStablePtr p
      freeStablePtr p

      let
        (o, set') = if IS.null set
          then (Nothing, set)
          else
            let (o, set') = IS.deleteFindMax set
            in (Just o, set')

      p' <- stablePtrToInt <$> newStablePtr set'
      return (o, p')
    capP $= p'
    case o of
      Just o' -> retSub o'
      Nothing -> retSub ()
  };
}

sub PUSH {
  #{ do
    let capP = cap "@_" @- 0 @- 0
    p <- return . intToStablePtr =<< readScalar =<< capP
    (_:ns) <- fromAV =<< findAV "@_"
    p' <- liftIO $ do
      set <- deRefStablePtr p
      freeStablePtr p
      let set' = foldl' (\set n -> IS.insert n set) set ns
      stablePtrToInt <$> (newStablePtr $! set')
    capP $= p'
    return ()
  };
}

sub SHIFT {
  my $p = $_[0][0];
  my $o;
  ($_[0][0], $o) = #{ do
    p <- return . intToStablePtr =<< readScalar =<< cap "$p"
    (o, p') <- liftIO $ do
      set <- deRefStablePtr p
      freeStablePtr p

      let
        (o, set') = if IS.null set
          then (Nothing, set)
          else
            let (o, set') = IS.deleteFindMin set
            in (Just o, set')

      p' <- stablePtrToInt <$> newStablePtr set'
      return (o, p')
    case o of
      Just o' -> retSub (p', o')
      Nothing -> retSub (p', ())
  };
  return $o;
}

sub UNSHIFT {
  goto \&PUSH;
}

sub SPLICE {
  die "not implemented";
}

sub DELETE {
  die "not implemented";
}

sub EXISTS {
  die "not implemented";
}

1;
